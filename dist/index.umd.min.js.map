{"version":3,"file":"index.umd.min.js","sources":["../src/utils.ts","../src/constants.ts","../src/lokalo.ts","../src/logger.ts","../src/store.ts"],"sourcesContent":["import type { Style, Styles } from './types';\n\n/**\n * Creates instance of simple formatter.\n */\nexport function formatter(styles: Styles) {\n\n  const _tokens = [] as string[];\n  const _styles = [] as string[];\n\n  const api = {\n    tokens: _tokens,\n    styles: _styles,\n    add,\n    unstyled,\n    toString\n  };\n\n  /**\n   * Adds a styled value to tokens to be formatted.\n   * \n   * @param style the style to be applied.\n   * @param label the value to apply style to.\n   */\n  function add(style: Style, label: any) {\n    _tokens.push(`%c` + label)\n    _styles.push(styles[style]);\n    return api;\n  }\n\n  /**\n   * Add unstyled value.\n   * \n   * @param label the value to be unstyled.\n   */\n  function unstyled(label: any) {\n    return add('inherit', label);\n  }\n\n  /**\n   * Converts tokens and values to styled result for logging.\n   */\n  function toString() {\n    return [_tokens.join(' '), ..._styles];\n  }\n\n  return api;\n\n}\n\n/**\n * Gets a timestamp.\n * \n * @param date optional date.\n */\nexport function getTimestamp(date = Date.now()) {\n  return (new Date(date)).toISOString();\n}\n\n/**\n * Normalizes a namespace.\n * \n * @param ns the namespace to format.\n * @param parent the parent to be prefixed.\n */\nexport function formatNamespace(ns: string, parent: string) {\n  const segments = [...parent.split('.'), ns];\n  return segments.join('.');\n}\n\n/**\n * Converts an error to object literal.\n * \n * @param err the error to convert to object\n */\nexport function serializeError<E extends Error>(err: E & { [key: string]: any }) {\n  if (!(err instanceof Error))\n    return err;\n  const result = Object.getOwnPropertyNames(err).reduce((a, c) => {\n    a[c as keyof E] = err[c];\n    return a;\n  }, {} as Record<keyof E, any>);\n  if (err.name && !result.name)\n    result.name = err.name;\n  return result;\n}\n","import type { ILokaloOptions } from './types';\n\nexport const LOG_LEVELS = <const>['log', 'fatal', 'error', 'warn', 'info', 'debug'];\n\nexport const STYLES = {\n  inherit: 'color: inherit',\n  dim: 'color: #666',\n  log: 'color: lightslategray',\n  fatal: 'color: red',\n  error: 'color: firebrick',\n  warn: 'color: gold',\n  info: 'color: deepskyblue',\n  debug: 'color: magenta'\n};\n\nexport const DEFAULTS: ILokaloOptions = {\n  namespace: 'lokalo',\n  parent: '',\n  level: 'error',\n  uid: () => Date.now(),\n  type: 'local' as 'local',\n  maxLines: 3,\n  displayOutput: true,\n  styles: { ...STYLES }\n};\n\n","import { LokaloLogger } from './logger';\n\nexport class Lokalo extends LokaloLogger {\n\n  static __instance: Lokalo;\n  loggers = new Set<LokaloLogger>();\n\n  constructor() {\n    super({ namespace: 'lokalo', parent: '' });\n    this.loggers.add(this);\n  }\n\n  static get singleton() {\n    if (!Lokalo.__instance)\n      Lokalo.__instance = new this();\n    return Lokalo.__instance;\n  }\n\n  clearAll() {\n    const loggers = [...this.loggers.values()];\n    loggers.forEach(logger => logger.clear());\n  }\n\n}\n\nexport default Lokalo.singleton;\n","import { getTimestamp, serializeError } from './utils';\nimport { DEFAULTS } from './constants';\nimport { LOG_LEVELS } from './constants';\nimport type {\n  ILokaloEvent,\n  ILokaloOptions, LogLevel,\n  LogLevelInternal,\n  ILokaloPayload\n} from './types';\nimport { LokaloStore } from './store';\n\nexport class LokaloLogger extends LokaloStore {\n\n  options: Required<ILokaloOptions>;\n\n  constructor(options: ILokaloOptions, public parent?: LokaloLogger) {\n    super({ ...DEFAULTS as any, ...options });\n    this.options = { ...DEFAULTS as any, ...options };\n    this.checkMaxLines();\n  }\n\n  private _logger(level: LogLevel | ILokaloPayload, payload?: ILokaloPayload) {\n\n    // We don't want to log empty lines in local storage.\n    if (typeof level === 'undefined')\n      return this;\n\n    if (!payload) {\n      payload = level;\n      level = '';\n    }\n\n    level = level || 'log';\n\n    if (!this.isActiveLevel(this.level as LogLevelInternal))\n      return this;\n\n    if (typeof payload === 'string')\n      payload = { message: payload };\n\n    else if (payload instanceof Error)\n      payload = serializeError(payload);\n\n    this.checkMaxLines();\n\n    const _payload = payload as ILokaloEvent;\n    _payload.id = this.options.uid();\n    _payload.namespace = this.namespace;\n    _payload.timestamp = getTimestamp();\n    _payload.message = _payload.message || '';\n    _payload.level = level as LogLevelInternal;\n\n    // Add to the queue.\n    this.queuePayload(_payload);\n\n    return this;\n\n  }\n\n  get level() {\n    return this.options.level;\n  }\n\n  /**\n   * Checks if a level is active.\n   * \n   * @param level the level to inspect as active.\n   */\n  isActiveLevel(level: LogLevelInternal) {\n    if (level === 'log')\n      return true;\n    const curIndex = LOG_LEVELS.indexOf(level);\n    const loggerIndex = LOG_LEVELS.indexOf(this.level as LogLevelInternal);\n    return curIndex <= loggerIndex;\n  }\n\n  /**\n    * Logs a payload by default level.\n    * \n    * @param payload the payload to be logged.\n    */\n  log(payload: ILokaloPayload) { return this._logger('log', payload); }\n\n  /**\n   * Logs a payload by fatal log level.\n   * \n   * @param payload the payload to be logged.\n   */\n  fatal(payload: ILokaloPayload) { this._logger('fatal', payload); }\n\n  /**\n   * Logs a payload by error log level.\n   * \n   * @param payload the payload to be logged.\n   */\n  error(payload: ILokaloPayload) { this._logger('error', payload) }\n\n  /**\n   * Logs a payload by warn log level.\n   * \n   * @param payload the payload to be logged.\n   */\n  warn(payload: ILokaloPayload) { this._logger('warn', payload); }\n\n  /**\n   * Logs a payload by info log level.\n   * \n   * @param payload the payload to be logged.\n   */\n  info(payload: ILokaloPayload) { this._logger('info', payload); }\n\n  /**\n   * Logs a payload by debug log level.\n   * \n   * @param payload the payload to be logged.\n   */\n  debug(payload: ILokaloPayload) { this._logger('debug', payload); }\n\n  /**\n   * Creates a child logger instance.\n   * \n   * @example\n   * import defLogger from './path/to/logger'\n   * const logger = defLogger.child('your.namespace');\n   * \n   * @param namespace the namspace of the child to create.\n   */\n  child(namespace: string) {\n    return new LokaloLogger({ ...this.options, parent: this.namespace, namespace }, this);\n  }\n\n}\n\n","import { formatNamespace, formatter, getTimestamp } from './utils';\nimport type { ILokaloEvent, ILokaloStoreOptions, Style } from './types';\n\nexport class LokaloStore {\n\n  namespace: string;\n  store: Storage = localStorage;\n  queue: ILokaloEvent[] = [];\n  queueId: any;\n\n  options: Required<ILokaloStoreOptions>;\n\n  constructor(options: ILokaloStoreOptions) {\n    this.namespace = options.parent ? formatNamespace(options.namespace, options.parent) : options.namespace;\n    this.store = options.type === 'local' ? localStorage : sessionStorage;\n    this.options = options as Required<ILokaloStoreOptions>;\n  }\n\n  /**\n   * Mutes the output to console only logs.\n   */\n  mute() {\n    this.options.displayOutput = false;\n  }\n\n  /**\n  * Unmutes the output to console and displays in console.\n  */\n  unmute() {\n    this.options.displayOutput = true;\n  }\n\n  /**\n   * Gets namespaced value by key.\n   * \n   */\n  getNamespace(): ILokaloEvent[] {\n    const obj = this.store.getItem(this.namespace);\n    return obj && obj.length ? JSON.parse(obj) : [];\n  }\n\n  /**\n   * Sets a namespace's value.\n   * \n   * @param data the value to set to the namespace.\n   */\n  setNamespace(data: ILokaloEvent | ILokaloEvent[]) {\n    if (!data) return;\n    if (!Array.isArray(data))\n      data = [data];\n    const str = JSON.stringify(data);\n    this.store.setItem(this.namespace, str);\n  }\n\n  /**\n   * Removes from storage by namespace.\n   */\n  removeNamespace() {\n    this.clearQueue();\n    this.store.removeItem(this.namespace);\n  }\n\n  /**\n   * Deletes rows for the given namespace.\n   * \n   * @param count the number of rows to delete if not 1.\n   */\n  removeRows(count = 1) {\n    let rows = this.getNamespace();\n    rows = rows.sort((a, b) => {\n      if (a.timestamp > b.timestamp)\n        return 1;\n      else if (a.timestamp < b.timestamp)\n        return -1;\n      else\n        return 0;\n    }).slice(count);\n    this.setNamespace(rows);\n  }\n\n  /**\n   * Gets the number of rows for a namespace.\n   */\n  size() {\n    return this.getNamespace().length;\n  }\n\n  /**\n   * Checks the maximum lines size.\n   */\n  checkMaxLines() {\n    if (!this.options.maxLines) return;\n    const count = this.size();\n    if (count === this.options.maxLines) {\n      this.removeRows();\n    }\n    else if (count > this.options.maxLines) {\n      const adj = count - this.options.maxLines;\n      this.removeRows(adj);\n    }\n  }\n\n  /**\n   * Returns rows for the active namespace.\n   * \n   * @param limit value used to limit returned rows.\n   */\n  rows(limit = 0) {\n    let rows = this.getNamespace().reverse();\n    if (this.queue.length)\n      rows = [...this.queue, ...rows];\n    if (limit)\n      rows = rows.slice(0, limit);\n    return rows;\n  }\n\n  /**\n   * Clears the current namespace.\n   */\n  clear() {\n    return this.removeNamespace();\n  }\n\n  /**\n   * Purges lines from the logger.\n   * \n   * @param lines the number of lines to purge.\n   */\n  purge(lines = 1) {\n    return this.removeRows(lines);\n  }\n\n  queuePayload(payload: ILokaloEvent) {\n\n    this.queue.push(payload);\n    this.resetQueue();\n\n    if (!this.options.displayOutput)\n      return;\n\n    const tsKey = getTimestamp().split('T')?.pop()?.slice(0, -1).trim(); // time only.\n    const truncMessage = payload.message.slice(0, 20);\n\n    const groupLabel = formatter(this.options.styles)\n      .add(payload.level as Style, tsKey)\n      .unstyled(this.namespace)\n      .unstyled('-')\n      .add('dim', truncMessage)\n      .toString();\n\n    console.groupCollapsed(...groupLabel);\n    console.log(payload);\n    console.groupEnd();\n\n  }\n\n  /**\n   * Writes the payload to storage by namespace.\n   * \n   * @param payload the payload to be written.\n   */\n  writePayload(payload: ILokaloEvent) {\n    const rows = [...this.getNamespace(), payload];\n    this.setNamespace(rows);\n  }\n\n  /**\n  * Clears the log queue.\n  */\n  clearQueue() {\n    if (this.queueId)\n      clearInterval(this.queueId);\n    this.queue = [];\n  }\n\n  /**\n   * Resets queue timer but leaves queue payloads.\n   */\n  resetQueue() {\n    clearInterval(this.queueId);\n    this.startQueue();\n  }\n\n  /**\n   * Starts the log queue.\n   */\n  startQueue() {\n    this.queueId = setInterval(() => {\n      const payload = this.queue.shift();\n      if (payload)\n        this.writePayload(payload as ILokaloEvent);\n      if (!this.queue.length)\n        this.clearQueue();\n    }, 100);\n  }\n\n}\n"],"names":["getTimestamp","date","Date","now","toISOString","LOG_LEVELS","STYLES","inherit","dim","log","fatal","error","warn","info","debug","DEFAULTS","namespace","parent","level","uid","type","maxLines","displayOutput","styles","_super","_this","Set","loggers","add","__extends","Object","Lokalo","__instance","this","values","forEach","logger","clear","options","checkMaxLines","LokaloLogger","payload","isActiveLevel","message","Error","err","result","getOwnPropertyNames","reduce","a","c","name","serializeError","_payload","id","timestamp","queuePayload","indexOf","_logger","ns","localStorage","split","join","store","sessionStorage","LokaloStore","obj","getItem","length","JSON","parse","data","Array","isArray","str","stringify","setItem","clearQueue","removeItem","count","rows","getNamespace","sort","b","slice","setNamespace","size","removeRows","adj","limit","reverse","queue","removeNamespace","lines","push","resetQueue","tsKey","pop","trim","truncMessage","groupLabel","_tokens","_styles","api","tokens","unstyled","label","toString","style","formatter","console","groupCollapsed","groupEnd","queueId","clearInterval","startQueue","setInterval","shift","writePayload","singleton"],"mappings":"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"}