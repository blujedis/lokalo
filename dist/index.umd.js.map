{"version":3,"file":"index.umd.js","sources":["../src/utils.ts","../src/constants.ts","../src/logger.ts"],"sourcesContent":["import type { Style, Styles } from './types';\n\n/**\n * Creates instance of simple formatter.\n */\nexport function formatter(styles: Styles) {\n\n  const _tokens = [] as string[];\n  const _styles = [] as string[];\n\n  const api = {\n    tokens: _tokens,\n    styles: _styles,\n    add,\n    unstyled,\n    toString\n  };\n\n  /**\n   * Adds a styled value to tokens to be formatted.\n   * \n   * @param style the style to be applied.\n   * @param label the value to apply style to.\n   */\n  function add(style: Style, label: any) {\n    _tokens.push(`%c` + label)\n    _styles.push(styles[style]);\n    return api;\n  }\n\n  /**\n   * Add unstyled value.\n   * \n   * @param label the value to be unstyled.\n   */\n  function unstyled(label: any) {\n    return add('inherit', label);\n  }\n\n  /**\n   * Converts tokens and values to styled result for logging.\n   */\n  function toString() {\n    return [_tokens.join(' '), ..._styles];\n  }\n\n  return api;\n\n}\n\n/**\n * Gets a timestamp.\n * \n * @param date optional date.\n */\nexport function getTimestamp(date = Date.now()) {\n  return (new Date(date)).toISOString();\n}\n\n/**\n * Normalizes a namespace.\n * \n * @param ns the namespace to format.\n * @param parent the parent to be prefixed.\n */\nexport function formatNamespace(ns: string, parent: string) {\n  const segments = [...parent.split('.'), ns];\n  return segments.join('.');\n}\n\n/**\n * Converts an error to object literal.\n * \n * @param err the error to convert to object\n */\nexport function serializeError<E extends Error>(err: E & { [key: string]: any }) {\n  if (!(err instanceof Error))\n    return err;\n  const result = Object.getOwnPropertyNames(err).reduce((a, c) => {\n    a[c as keyof E] = err[c];\n    return a;\n  }, {} as Record<keyof E, any>);\n  if (err.name && !result.name)\n    result.name = err.name;\n  return result;\n}\n","import type { IStorageLoggerOptions, LogLevel } from './types';\n\nexport const ENV_LOG_LEVEL = typeof process !== 'undefined' ? process.env['REACT_APP_LOG_LEVEL'] : 'error';\n\nexport const LOG_LEVELS = <const>['log', 'fatal', 'error', 'warn', 'info', 'debug'];\n\nexport const STYLES = {\n  inherit: 'color: inherit',\n  dim: 'color: #666',\n  log: 'color: lightslategray',\n  fatal: 'color: gold; background-color: firebrick',\n  error: 'color: firebrick',\n  warn: 'color: gold',\n  info: 'color: deepskyblue',\n  debug: 'color: magenta'\n};\n\nexport const DEFAULTS = {\n  type: 'local' as 'local',\n  maxLines: 10,\n  key: '$uid' as IStorageLoggerOptions['key'],\n  keyValue: () => Date.now(),\n  userKey: 'user',\n  level: ENV_LOG_LEVEL as LogLevel,\n  consoleOutput: 'development' as IStorageLoggerOptions['consoleOutput'],\n  styles: { ...STYLES }\n};\n\n","import { formatNamespace, formatter, getTimestamp, serializeError } from './utils';\nimport { DEFAULTS, LOG_LEVELS } from './constants';\nimport type { IStorageLoggerOptions, LogLevel, \n  StorageLoggerEvent, StorageLoggerPayload, Style } from './types';\n\n/**\n * Creates a new storage logger instance.\n * \n * @param options storage logger options. \n * @param namespaces currently loaded namespaces.\n */\nfunction createStorageLogger<K extends string = '$uid', U extends Record<string, any> = Record<string, any>>(options: IStorageLoggerOptions<K>, namespaces: string[] = []) {\n\n  type Logger = typeof logger;\n\n  options = {\n    ...DEFAULTS as any,\n    ...options\n  };\n\n  const store = options.type === 'local' ? localStorage : sessionStorage;\n\n  const { parent, namespace, maxLines, key, keyValue, userKey, level: initLevel, consoleOutput, styles } = options as Required<IStorageLoggerOptions<K>>;\n\n  const activeNamespace = formatNamespace(namespace, parent);\n\n  let _queue: StorageLoggerEvent<K, U>[] = [];\n  let _queueId: any;\n\n  if (!namespaces.includes(activeNamespace))\n    namespaces.push(activeNamespace);\n\n  /**\n   * Clears the log queue.\n   */\n  function clearQueue() {\n    if (!_queueId) return;\n    clearInterval(_queueId);\n    _queue = [];\n  }\n\n  /**\n   * Starts the log queue.\n   */\n  function startQueue() {\n    _queueId = setInterval(() => {\n      if (!_queue.length)\n        return clearQueue();\n      writePayload(activeNamespace, _queue.shift() as StorageLoggerEvent<K, U>);\n    }, 150);\n  }\n\n  /**\n   * Gets namespaced value by key.\n   * \n   * @param ns the namespace to get.\n   */\n  function getKey(ns: string): StorageLoggerEvent<K, U>[] {\n    const obj = store.getItem(ns);\n    return obj && obj.length ? JSON.parse(obj) : [];\n  }\n\n  /**\n   * Gets a user from storage.\n   * NOTE: always uses localStorage.\n   * \n   * @param key the user key for retrieving user object.\n   */\n  function getUser(key: string) {\n    const user = localStorage.getItem(key);\n    const item = store.getItem(key);\n    if (!user || !item)\n      return null;\n    return JSON.parse(item);\n  }\n\n  /**\n   * Sets a namespace's value.\n   * \n   * @param ns the names apce to be set.\n   * @param data the value to set to the namespace.\n   */\n  function setKey(ns: string, data: StorageLoggerEvent<K, U> | StorageLoggerEvent<K, U>[]) {\n    if (!data) return;\n    if (!Array.isArray(data))\n      data = [data];\n    const str = JSON.stringify(data);\n    store.setItem(ns, str);\n  }\n\n  function removeKey(ns: string) {\n    store.removeItem(ns);\n  }\n\n  /**\n   * Deletes rows for the given namespace.\n   * \n   * @param ns the namespace to delete rows for.\n   * @param count the number of rows to delete if not 1.\n   */\n  function deleteRows(ns: string, count = 1) {\n    const rows = getKey(ns);\n    rows.sort((a, b) => {\n      if (a.timestamp > b.timestamp)\n        return 1;\n      else if (a.timestamp < b.timestamp)\n        return -1;\n      else\n        return 0;\n    }).splice(0, count);\n    setKey(ns, rows);\n  }\n\n  /**\n   * Gets the number of rows for a namespace.\n   * \n   * @param ns the namespace to get row count for.\n   */\n  function rowsCount(ns: string) {\n    return getKey(ns).length;\n  }\n\n  /**\n   * Gets the size of a namespace.\n   * \n   * @param ns the namespace to get size for.\n   */\n  function checkSize(ns: string) {\n    if (!maxLines) return;\n    const count = rowsCount(ns);\n    if (count === maxLines) {\n      deleteRows(ns);\n    }\n    else if (count > maxLines) {\n      const adj = count - maxLines;\n      deleteRows(ns, adj);\n    }\n  }\n\n  /**\n   * Checks if a level is active.\n   * \n   * @param level the level to inspect as active.\n   */\n  function isActiveLevel(level: LogLevel) {\n    const curIndex = LOG_LEVELS.indexOf(level);\n    const loggerIndex = LOG_LEVELS.indexOf(logger.level as LogLevel);\n    return curIndex <= loggerIndex;\n  }\n\n  /**\n   * Checks if should output to console as well as log to storage.\n   */\n  function shouldOutput() {\n    return (consoleOutput === 'always' || process.env['NODE_ENV'] !== 'production');\n  }\n\n  /**\n   * Writes the payload to storage by namespace.\n   * \n   * @param ns the namespace to be written.\n   * @param payload the payload to be written.\n   */\n  function writePayload(ns: string, payload: StorageLoggerEvent<K, U>) {\n    const rows = [...getKey(ns), payload];\n    if (shouldOutput()) {\n      const tsKey = getTimestamp(payload[key]).split('.').shift()?.split('T').join(' ');\n      const trimNs = ns.replace(/^logger\\./, '');\n      const truncMessage = payload.message.slice(0, 25);\n      const groupLabel = formatter(styles)\n        .add(payload.level as Style, tsKey)\n        .unstyled(trimNs)\n        .unstyled('-')\n        .add('dim', truncMessage)\n        .toString();\n      console.groupCollapsed(...groupLabel);\n      console.log(payload);\n      console.groupEnd();\n    }\n    setKey(ns, rows);\n  }\n\n  /**\n    * Logs a payload by log level.\n    * \n    * @param level the level being logged.\n    * @param payload the value or payload to log.\n    */\n  function logger(level: LogLevel, payload: StorageLoggerPayload): Logger;\n\n  /**\n   * Logs a payload by default level.\n   * \n   * @param payload the value or payload to log.\n   */\n  function logger(payload: StorageLoggerPayload): Logger;\n\n  function logger(level: LogLevel | StorageLoggerPayload, payload?: StorageLoggerPayload) {\n\n    // We don't want to log empty lines in local storage.\n    if (typeof level === 'undefined')\n      return logger;\n\n    if (!payload) {\n      payload = level;\n      level = '';\n    }\n\n    level = level || 'log';\n\n    if (!isActiveLevel(logger.level as LogLevel))\n      return logger;\n\n    if (typeof payload === 'string')\n      payload = { message: payload };\n\n    else if (payload instanceof Error)\n      payload = serializeError(payload);\n\n    checkSize(activeNamespace);\n\n    const _payload = payload as StorageLoggerEvent<K, U>;\n    _payload[key as K] = keyValue() as any;\n    _payload.namespace = activeNamespace;\n    _payload.timestamp = getTimestamp();\n    _payload.message = _payload.message || '';\n\n    if (userKey)\n      _payload.user = getUser(userKey);\n\n    // Add to the queue.\n    _queue.push(_payload);\n\n    if (!_queueId)\n      startQueue();\n\n    return logger;\n\n  }\n\n  /**\n   * The current enabled log level.\n   */\n  logger.level = initLevel as Omit<LogLevel, 'log'>;\n\n  /**\n   * The active namespace.\n   */\n  logger.namespace = activeNamespace;\n\n  /**\n   * An array of logger namespaces.\n   */\n  logger.namespaces = namespaces;\n\n  /**\n   * Logs a payload by default level.\n   * \n   * @param payload the payload to be logged.\n   */\n  logger.log = (payload: StorageLoggerPayload) => logger('log', payload);\n\n  /**\n   * Logs a payload by fatal log level.\n   * \n   * @param payload the payload to be logged.\n   */\n  logger.fatal = (payload: StorageLoggerPayload) => logger('fatal', payload);\n\n  /**\n   * Logs a payload by error log level.\n   * \n   * @param payload the payload to be logged.\n   */\n  logger.error = (payload: StorageLoggerPayload) => logger('error', payload);\n\n  /**\n   * Logs a payload by warn log level.\n   * \n   * @param payload the payload to be logged.\n   */\n  logger.warn = (payload: StorageLoggerPayload) => logger('warn', payload);\n\n  /**\n   * Logs a payload by info log level.\n   * \n   * @param payload the payload to be logged.\n   */\n  logger.info = (payload: StorageLoggerPayload) => logger('info', payload);\n\n  /**\n   * Logs a payload by debug log level.\n   * \n   * @param payload the payload to be logged.\n   */\n  logger.debug = (payload: StorageLoggerPayload) => logger('debug', payload);\n\n  /**\n   * Creates a child logger instance.\n   * \n   * @example\n   * import defLogger from './path/to/logger'\n   * const logger = defLogger.child('your.namespace');\n   * \n   * @param ns the namspace of the child to create.\n   */\n  logger.child = (ns: string) => {\n    const nextParent = /global$/.test(activeNamespace) ? 'logger' : activeNamespace;\n    return createStorageLogger<K>({ ...options, parent: nextParent, namespace: ns }, namespaces);\n  };\n\n  /**\n   * Returns rows for the active namespace.\n   * \n   * @param limit value used to limit returned rows.\n   */\n  logger.rows = (limit = 0) => {\n    let rows = getKey(activeNamespace).reverse();\n    if (limit)\n      rows = rows.slice(0, limit);\n    return rows;\n  };\n\n  /**\n   * Gets the size of the namespace by row count.\n   */\n  logger.size = () => rowsCount(activeNamespace);\n\n  /**\n   * Clears the current namespace.\n   */\n  logger.clear = () => {\n    removeKey(activeNamespace);\n  };\n\n  /**\n   * Clears all namespaces.\n   */\n  logger.clearAll = () => namespaces.forEach(ns => removeKey(ns));\n\n  /**\n   * Purges lines from the logger.\n   * \n   * @param lines the number of lines to purge.\n   */\n  logger.purge = (lines = 1) => {\n    deleteRows(activeNamespace, lines);\n  };\n\n  return logger;\n\n}\n\n/**\n * Default logger instance.\n */\nconst defaultLogger = createStorageLogger({ parent: 'logger', namespace: 'global' });\n\nexport default defaultLogger;"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEA;;;aAGgB,SAAS,CAAC,MAAc;QAEtC,IAAM,OAAO,GAAG,EAAc,CAAC;QAC/B,IAAM,OAAO,GAAG,EAAc,CAAC;QAE/B,IAAM,GAAG,GAAG;YACV,MAAM,EAAE,OAAO;YACf,MAAM,EAAE,OAAO;YACf,GAAG,KAAA;YACH,QAAQ,UAAA;YACR,QAAQ,UAAA;SACT,CAAC;;;;;;;QAQF,SAAS,GAAG,CAAC,KAAY,EAAE,KAAU;YACnC,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAA;YAC1B,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YAC5B,OAAO,GAAG,CAAC;SACZ;;;;;;QAOD,SAAS,QAAQ,CAAC,KAAU;YAC1B,OAAO,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;SAC9B;;;;QAKD,SAAS,QAAQ;YACf,sBAAQ,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,GAAK,OAAO,EAAE;SACxC;QAED,OAAO,GAAG,CAAC;IAEb,CAAC;IAED;;;;;aAKgB,YAAY,CAAC,IAAiB;QAAjB,qBAAA,EAAA,OAAO,IAAI,CAAC,GAAG,EAAE;QAC5C,OAAO,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,WAAW,EAAE,CAAC;IACxC,CAAC;IAED;;;;;;aAMgB,eAAe,CAAC,EAAU,EAAE,MAAc;QACxD,IAAM,QAAQ,mCAAO,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,IAAE,EAAE,EAAC,CAAC;QAC5C,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IAED;;;;;aAKgB,cAAc,CAAkB,GAA+B;QAC7E,IAAI,EAAE,GAAG,YAAY,KAAK,CAAC;YACzB,OAAO,GAAG,CAAC;QACb,IAAM,MAAM,GAAG,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,UAAC,CAAC,EAAE,CAAC;YACzD,CAAC,CAAC,CAAY,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;YACzB,OAAO,CAAC,CAAC;SACV,EAAE,EAA0B,CAAC,CAAC;QAC/B,IAAI,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI;YAC1B,MAAM,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;QACzB,OAAO,MAAM,CAAC;IAChB;;QCnFa,aAAa,GAAG,OAAO,OAAO,KAAK,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,GAAG,QAAQ;QAE9F,UAAU,GAAU,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE;QAEvE,MAAM,GAAG;QACpB,OAAO,EAAE,gBAAgB;QACzB,GAAG,EAAE,aAAa;QAClB,GAAG,EAAE,uBAAuB;QAC5B,KAAK,EAAE,0CAA0C;QACjD,KAAK,EAAE,kBAAkB;QACzB,IAAI,EAAE,aAAa;QACnB,IAAI,EAAE,oBAAoB;QAC1B,KAAK,EAAE,gBAAgB;MACvB;QAEW,QAAQ,GAAG;QACtB,IAAI,EAAE,OAAkB;QACxB,QAAQ,EAAE,EAAE;QACZ,GAAG,EAAE,MAAsC;QAC3C,QAAQ,EAAE,cAAM,OAAA,IAAI,CAAC,GAAG,EAAE,GAAA;QAC1B,OAAO,EAAE,MAAM;QACf,KAAK,EAAE,aAAyB;QAChC,aAAa,EAAE,aAAuD;QACtE,MAAM,eAAO,MAAM,CAAE;;;ICpBvB;;;;;;IAMA,SAAS,mBAAmB,CAAiF,OAAiC,EAAE,UAAyB;QAAzB,2BAAA,EAAA,eAAyB;QAIvK,OAAO,yBACF,QAAe,GACf,OAAO,CACX,CAAC;QAEF,IAAM,KAAK,GAAG,OAAO,CAAC,IAAI,KAAK,OAAO,GAAG,YAAY,GAAG,cAAc,CAAC;QAEjE,IAAA,KAAmG,OAA6C,EAA9I,MAAM,YAAA,EAAE,SAAS,eAAA,EAAE,QAAQ,cAAA,EAAE,GAAG,SAAA,EAAE,QAAQ,cAAA,EAAE,OAAO,aAAA,EAAS,SAAS,WAAA,EAAE,aAAa,mBAAA,EAAE,MAAM,YAAkD,CAAC;QAEvJ,IAAM,eAAe,GAAG,eAAe,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAE3D,IAAI,MAAM,GAA+B,EAAE,CAAC;QAC5C,IAAI,QAAa,CAAC;QAElB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,eAAe,CAAC;YACvC,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;;;;QAKnC,SAAS,UAAU;YACjB,IAAI,CAAC,QAAQ;gBAAE,OAAO;YACtB,aAAa,CAAC,QAAQ,CAAC,CAAC;YACxB,MAAM,GAAG,EAAE,CAAC;SACb;;;;QAKD,SAAS,UAAU;YACjB,QAAQ,GAAG,WAAW,CAAC;gBACrB,IAAI,CAAC,MAAM,CAAC,MAAM;oBAChB,OAAO,UAAU,EAAE,CAAC;gBACtB,YAAY,CAAC,eAAe,EAAE,MAAM,CAAC,KAAK,EAA8B,CAAC,CAAC;aAC3E,EAAE,GAAG,CAAC,CAAC;SACT;;;;;;QAOD,SAAS,MAAM,CAAC,EAAU;YACxB,IAAM,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAC9B,OAAO,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;SACjD;;;;;;;QAQD,SAAS,OAAO,CAAC,GAAW;YAC1B,IAAM,IAAI,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACvC,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAChC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI;gBAChB,OAAO,IAAI,CAAC;YACd,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SACzB;;;;;;;QAQD,SAAS,MAAM,CAAC,EAAU,EAAE,IAA2D;YACrF,IAAI,CAAC,IAAI;gBAAE,OAAO;YAClB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;gBACtB,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;YAChB,IAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACjC,KAAK,CAAC,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;SACxB;QAED,SAAS,SAAS,CAAC,EAAU;YAC3B,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;SACtB;;;;;;;QAQD,SAAS,UAAU,CAAC,EAAU,EAAE,KAAS;YAAT,sBAAA,EAAA,SAAS;YACvC,IAAM,IAAI,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;YACxB,IAAI,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;gBACb,IAAI,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS;oBAC3B,OAAO,CAAC,CAAC;qBACN,IAAI,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS;oBAChC,OAAO,CAAC,CAAC,CAAC;;oBAEV,OAAO,CAAC,CAAC;aACZ,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACpB,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;SAClB;;;;;;QAOD,SAAS,SAAS,CAAC,EAAU;YAC3B,OAAO,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC;SAC1B;;;;;;QAOD,SAAS,SAAS,CAAC,EAAU;YAC3B,IAAI,CAAC,QAAQ;gBAAE,OAAO;YACtB,IAAM,KAAK,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC;YAC5B,IAAI,KAAK,KAAK,QAAQ,EAAE;gBACtB,UAAU,CAAC,EAAE,CAAC,CAAC;aAChB;iBACI,IAAI,KAAK,GAAG,QAAQ,EAAE;gBACzB,IAAM,GAAG,GAAG,KAAK,GAAG,QAAQ,CAAC;gBAC7B,UAAU,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;aACrB;SACF;;;;;;QAOD,SAAS,aAAa,CAAC,KAAe;YACpC,IAAM,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC3C,IAAM,WAAW,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,KAAiB,CAAC,CAAC;YACjE,OAAO,QAAQ,IAAI,WAAW,CAAC;SAChC;;;;QAKD,SAAS,YAAY;YACnB,QAAQ,aAAa,KAAK,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,YAAY,EAAE;SACjF;;;;;;;QAQD,SAAS,YAAY,CAAC,EAAU,EAAE,OAAiC;;YACjE,IAAM,IAAI,mCAAO,MAAM,CAAC,EAAE,CAAC,IAAE,OAAO,EAAC,CAAC;YACtC,IAAI,YAAY,EAAE,EAAE;gBAClB,IAAM,KAAK,GAAG,MAAA,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,0CAAE,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;gBAClF,IAAM,MAAM,GAAG,EAAE,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;gBAC3C,IAAM,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;gBAClD,IAAM,UAAU,GAAG,SAAS,CAAC,MAAM,CAAC;qBACjC,GAAG,CAAC,OAAO,CAAC,KAAc,EAAE,KAAK,CAAC;qBAClC,QAAQ,CAAC,MAAM,CAAC;qBAChB,QAAQ,CAAC,GAAG,CAAC;qBACb,GAAG,CAAC,KAAK,EAAE,YAAY,CAAC;qBACxB,QAAQ,EAAE,CAAC;gBACd,OAAO,CAAC,cAAc,OAAtB,OAAO,EAAmB,UAAU,EAAE;gBACtC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACrB,OAAO,CAAC,QAAQ,EAAE,CAAC;aACpB;YACD,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;SAClB;QAiBD,SAAS,MAAM,CAAC,KAAsC,EAAE,OAA8B;;YAGpF,IAAI,OAAO,KAAK,KAAK,WAAW;gBAC9B,OAAO,MAAM,CAAC;YAEhB,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,GAAG,KAAK,CAAC;gBAChB,KAAK,GAAG,EAAE,CAAC;aACZ;YAED,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC;YAEvB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAiB,CAAC;gBAC1C,OAAO,MAAM,CAAC;YAEhB,IAAI,OAAO,OAAO,KAAK,QAAQ;gBAC7B,OAAO,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;iBAE5B,IAAI,OAAO,YAAY,KAAK;gBAC/B,OAAO,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;YAEpC,SAAS,CAAC,eAAe,CAAC,CAAC;YAE3B,IAAM,QAAQ,GAAG,OAAmC,CAAC;YACrD,QAAQ,CAAC,GAAQ,CAAC,GAAG,QAAQ,EAAS,CAAC;YACvC,QAAQ,CAAC,SAAS,GAAG,eAAe,CAAC;YACrC,QAAQ,CAAC,SAAS,GAAG,YAAY,EAAE,CAAC;YACpC,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,IAAI,EAAE,CAAC;YAE1C,IAAI,OAAO;gBACT,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;;YAGnC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAEtB,IAAI,CAAC,QAAQ;gBACX,UAAU,EAAE,CAAC;YAEf,OAAO,MAAM,CAAC;SAEf;;;;QAKD,MAAM,CAAC,KAAK,GAAG,SAAkC,CAAC;;;;QAKlD,MAAM,CAAC,SAAS,GAAG,eAAe,CAAC;;;;QAKnC,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC;;;;;;QAO/B,MAAM,CAAC,GAAG,GAAG,UAAC,OAA6B,IAAK,OAAA,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,GAAA,CAAC;;;;;;QAOvE,MAAM,CAAC,KAAK,GAAG,UAAC,OAA6B,IAAK,OAAA,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,GAAA,CAAC;;;;;;QAO3E,MAAM,CAAC,KAAK,GAAG,UAAC,OAA6B,IAAK,OAAA,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,GAAA,CAAC;;;;;;QAO3E,MAAM,CAAC,IAAI,GAAG,UAAC,OAA6B,IAAK,OAAA,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,GAAA,CAAC;;;;;;QAOzE,MAAM,CAAC,IAAI,GAAG,UAAC,OAA6B,IAAK,OAAA,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,GAAA,CAAC;;;;;;QAOzE,MAAM,CAAC,KAAK,GAAG,UAAC,OAA6B,IAAK,OAAA,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,GAAA,CAAC;;;;;;;;;;QAW3E,MAAM,CAAC,KAAK,GAAG,UAAC,EAAU;YACxB,IAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,QAAQ,GAAG,eAAe,CAAC;YAChF,OAAO,mBAAmB,uBAAS,OAAO,KAAE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,EAAE,KAAI,UAAU,CAAC,CAAC;SAC9F,CAAC;;;;;;QAOF,MAAM,CAAC,IAAI,GAAG,UAAC,KAAS;YAAT,sBAAA,EAAA,SAAS;YACtB,IAAI,IAAI,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC,OAAO,EAAE,CAAC;YAC7C,IAAI,KAAK;gBACP,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC9B,OAAO,IAAI,CAAC;SACb,CAAC;;;;QAKF,MAAM,CAAC,IAAI,GAAG,cAAM,OAAA,SAAS,CAAC,eAAe,CAAC,GAAA,CAAC;;;;QAK/C,MAAM,CAAC,KAAK,GAAG;YACb,SAAS,CAAC,eAAe,CAAC,CAAC;SAC5B,CAAC;;;;QAKF,MAAM,CAAC,QAAQ,GAAG,cAAM,OAAA,UAAU,CAAC,OAAO,CAAC,UAAA,EAAE,IAAI,OAAA,SAAS,CAAC,EAAE,CAAC,GAAA,CAAC,GAAA,CAAC;;;;;;QAOhE,MAAM,CAAC,KAAK,GAAG,UAAC,KAAS;YAAT,sBAAA,EAAA,SAAS;YACvB,UAAU,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;SACpC,CAAC;QAEF,OAAO,MAAM,CAAC;IAEhB,CAAC;IAED;;;QAGM,aAAa,GAAG,mBAAmB,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE;;;;;;;;;;;;;;"}